{"version":3,"sources":["webpack://castle-game/webpack/bootstrap","webpack://castle-game/webpack/runtime/global","webpack://castle-game/webpack/runtime/publicPath","webpack://castle-game/./src/modules/gameBoard.js","webpack://castle-game/./src/modules/castle.js","webpack://castle-game/./src/modules/createEnemySpriteSheet.js","webpack://castle-game/./src/modules/enemy.js","webpack://castle-game/./src/modules/timer.js","webpack://castle-game/./src/modules/questionGenerator.js","webpack://castle-game/./src/modules/scoreHandler.js","webpack://castle-game/./src/modules/defaultSettings.js","webpack://castle-game/./src/modules/domUtils.js","webpack://castle-game/./src/modules/engine.js","webpack://castle-game/./src/modules/questionHistory.js","webpack://castle-game/./src/modules/game.js","webpack://castle-game/./src/index.js"],"names":["__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","g","globalThis","this","Function","e","window","scriptUrl","importScripts","location","document","currentScript","src","scripts","getElementsByTagName","length","Error","replace","p","element","querySelector","height","width","lives","elements","container","getElementById","livesText","setup","draw","damage","amount","onGameOver","textContent","Math","max","sprite","Image","enemySpriteSheet","sprite2","enemySpriteSheet2","sprite3","enemySpriteSheet3","spriteSheets","getRandomSpriteSheet","floor","random","getBackgroundSize","ENEMY_EVENT_TYPES","Object","freeze","HIT_CASTLE","QUESTION_ANSWERED","Enemy","position","x","y","speed","question","fieldWidth","handleSelectEnemy","damageCastle","deleteEnemy","timeSinceLastFrame","frameX","frameWidth","spriteSheetWidth","frameHeight","spriteSheetHeight","getBackgroundPosition","update","deltaTime","enemyElement","createElement","questionElement","classList","add","style","text","backgroundImage","backgroundPosition","backgroundSize","appendChild","addEventListener","events","handleDelete","remove","push","createEnemyEvent","transform","toggleSelect","toggle","addEvent","event","getQuestionInfo","answer","type","answerValue","answerIsCorrect","value","isCorrect","duration","onFinish","autoRestart","timeRemaining","tick","getHumanTimeRemaining","seconds","ceil","minutes","operatorDifficulty","easy","medium","hard","insane","wholeNumberGenerator","number","questionNumberGenerator","difficulty","generateDifficulty","operator","indexOperatorGenerator","operatorSelector","number1","number2","questionText","questionArr","split","num1","Number","num2","answerQuestion","scoreElements","querySelectorAll","score","forEach","addPoints","reset","SPAWN_POINTS","FIRST_LANE","SECOND_LANE","THIRD_LANE","POINTS","CORRECT_ANSWER","WRONG_ANSWER","CASTLE_LIFE_LOST","enemySpeed","enemySpeedIncrement","spawnTimerMs","gameTimerMs","questionDifficulty","castleStartingLives","lastAnswersToShow","hideElement","display","showElement","displayValue","tagName","attributes","el","assign","createTextNode","tableBody","cssClasses","questionHistory","fragment","createDocumentFragment","row","tableRow","questionData","questionAnswer","toString","className","userAnswerData","slice","userAnswerEl","bgColorClass","answerText","answerSpan","iconI","title","createQuestionHistoryUserAnswer","createQuestionHistoryTableRow","replaceChildren","startPage","gamePage","gameOverPage","difficultySelectPage","answerForm","answerInput","gameTimer","startButton","restartButton","pauseButton","difficultyButtons","homeButton","gameOverTitle","settings","timers","constructor","render","running","rafID","accumulatedTime","currentTime","timeStep","cycle","bind","timeStamp","requestAnimationFrame","updated","start","stop","cancelAnimationFrame","gameState","keys","key","enemies","enemy","selectedEnemy","spawnEnemy","getRandomSpawnPoint","filter","handleWin","onOpenClaimRewards","gameOver","handleAnswerSubmit","preventDefault","trim","correctAnswer","enemyEvent","scoreHandler","focus","clickedEnemy","find","currentTarget","titleText","spawnTimer","restart","handlePause","first","second","disabled","handleStartButtonClick","handleDifficultySelect","selectedDifficulty","target","dataset","handleHomeButtonClick","init","button"],"mappings":"8MACIA,EAA2B,GAG/B,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaE,QAGrB,IAAIC,EAASN,EAAyBE,GAAY,CAGjDG,QAAS,IAOV,OAHAE,EAAoBL,GAAUI,EAAQA,EAAOD,QAASJ,GAG/CK,EAAOD,QCrBfJ,EAAoBO,EAAI,WACvB,GAA0B,iBAAfC,WAAyB,OAAOA,WAC3C,IACC,OAAOC,MAAQ,IAAIC,SAAS,cAAb,GACd,MAAOC,GACR,GAAsB,iBAAXC,OAAqB,OAAOA,QALjB,G,MCAxB,IAAIC,EACAb,EAAoBO,EAAEO,gBAAeD,EAAYb,EAAoBO,EAAEQ,SAAW,IACtF,IAAIC,EAAWhB,EAAoBO,EAAES,SACrC,IAAKH,GAAaG,IACbA,EAASC,gBACZJ,EAAYG,EAASC,cAAcC,MAC/BL,GAAW,CACf,IAAIM,EAAUH,EAASI,qBAAqB,UACzCD,EAAQE,SAAQR,EAAYM,EAAQA,EAAQE,OAAS,GAAGH,KAK7D,IAAKL,EAAW,MAAM,IAAIS,MAAM,yDAChCT,EAAYA,EAAUU,QAAQ,OAAQ,IAAIA,QAAQ,QAAS,IAAIA,QAAQ,YAAa,KACpFvB,EAAoBwB,EAAIX,G,SCfxB,MAMA,EANkB,CACdY,QAAST,SAASU,cAAc,eAChCC,OAAQ,IACRC,MAAO,KCuBX,EA1Be,CACXD,OAAQ,IACRC,MAAO,IACPC,MAAO,KACPC,SAAU,CACNC,UAAWf,SAASgB,eAAe,UACnCC,UAAWjB,SAASgB,eAAe,iBAGvCE,MAAML,GACFpB,KAAKoB,MAAQA,EACbpB,KAAK0B,QAGTC,OAAOC,EAAQC,GACX7B,KAAKoB,OAASQ,EACd5B,KAAK0B,OAEc,IAAf1B,KAAKoB,OAAaS,KAG1BH,OACI1B,KAAKqB,SAASG,UAAUM,YAAcC,KAAKC,IAAI,EAAGhC,KAAKoB,S,+BClB/D,MAAMa,EAAS,IAAIC,MACnBD,EAAOxB,IAAM0B,EAEb,MAAMC,EAAU,IAAIF,MACpBE,EAAQ3B,IAAM4B,EAEd,MAAMC,EAAU,IAAIJ,MACpBI,EAAQ7B,IAAM8B,EAEd,MAAMC,EAAe,CAACP,EAAQG,EAASE,GAavC,SAASG,IACL,OAAOD,EAAaT,KAAKW,MAAMX,KAAKY,SAAWH,EAAa5B,SAGhE,SAASgC,IACL,MAAO,cAmCX,MChEMC,EAAoBC,OAAOC,OAAO,CACpCC,WAAY,EACZC,kBAAmB,IAGvB,SAASC,GACLC,UAAU,EAAEC,EAAC,EAAEC,GAAG,MAClBC,EAAK,SACLC,EAAQ,WACRC,EAAU,kBACVC,EAAiB,aACjBC,EAAY,YACZC,GACA,IACA,MAAMxB,EDkBV,WACI,IAAIyB,EAAqB,EACrBC,EAAS,EAmBb,MAAO,CACH5B,OAAQQ,IACRqB,WArCWC,IAsCXC,YArCYC,GAsCZxB,uBACAyB,sBAjBJ,WACI,MAAO,IAxBIH,IAwBaF,YAiBxBjB,oBACAuB,OAfJ,SAAgBC,GACZR,GAAsBQ,EAClBR,EA3BU,KAiBVC,GAhBM,GAgBeA,EAAS,EAC7BA,GAAU,EAWXD,EAAqB,KCnCJ,GACnBzC,EAAQgB,EAAiB2B,WACzB5C,EAASiB,EAAiB6B,YAC1Bb,EAAW,CAAEC,IAAGC,KAChBrC,EAKN,WACI,MAAMqD,EAAe9D,SAAS+D,cAAc,OACtCC,EAAkBhE,SAAS+D,cAAc,OAsB/C,OAnBAD,EAAaG,UAAUC,IAAI,SAC3BJ,EAAaK,MAAMvD,MAAQ,GAAGA,MAC9BkD,EAAaK,MAAMxD,OAAS,GAAGA,MAG/BqD,EAAgBC,UAAUC,IAAI,kBAC9BF,EAAgBzC,YAAcyB,EAASoB,KAGvCN,EAAaK,MAAME,gBAAkB,OAAOzC,EAAiBF,OAAOxB,OACpE4D,EAAaK,MAAMG,mBACf1C,EAAiB+B,wBACrBG,EAAaK,MAAMI,eACf3C,EAAiBS,oBAErByB,EAAaU,YAAYR,GAEzBF,EAAaW,iBAAiB,QAASvB,GAEhCY,EA7BKC,GACVW,EAAS,GA2Df,SAASC,IACLvB,EAAY3C,GACZA,EAAQmE,SAmBZ,OAAOrC,OAAOC,OAAO,CACjBoB,OA5CJ,SAAgBC,GACZ,GANOjB,EAASC,GAAKI,EAAarC,EAAQ,EAUtC,OAHA+D,IACAD,EAAOG,KAAKC,EAAiBxC,EAAkBG,kBAC/CU,EAAa,GAMjBP,EAASC,GAAKE,GAASc,EAAY,KAEnCjC,EAAiBgC,OAAOC,IAiCxB1C,KA9BJ,WAEIV,EAAQ0D,MAAMY,UAAY,aAAanC,EAASC,QAAQD,EAASE,OACjErC,EAAQ0D,MAAMG,mBACV1C,EAAiB+B,yBA2BrBgB,eACAK,aApBJ,WACIvE,EAAQwD,UAAUgB,OAAO,aAoBzBC,SAjBJ,SAAkBC,GACdT,EAAOG,KAAKM,IAiBZC,gBAdJ,WACI,MAAO,CACHhB,KAAMpB,EAASoB,KACfiB,OAAQrC,EAASqC,OACjBX,WAWJ1B,WACA,cACI,OAAOvC,KAKnB,SAASqE,EAAiBQ,EAAMC,EAAc,KAAMC,GAAkB,GAClE,MAAO,CACHF,OACAD,OAAQ,CACJI,MAAOF,EACPG,UAAWF,ICrFvB,QAnCA,SAAeG,EAAUC,GAAU,YAAEC,GAAc,GAAS,IACxD,IAAIC,EAAgBH,EA4BpB,OAAOpD,OAAOC,OAAO,CACjBuD,KAlBJ,SAAclC,GACViC,EAAgBtE,KAAKC,IAAI,EAAGqE,EAAgBjC,GAExCiC,GAAiB,IAPrBF,IACIC,IALJC,EAAgBH,KA2BhBK,sBAZJ,WACI,MAAMC,EAAUzE,KAAK0E,KAAKJ,EAAgB,KAAQ,GAC5CK,EAAU3E,KAAKW,MAAMX,KAAK0E,KAAKJ,EAAgB,KAAQ,IAK7D,MAAO,GAFkBK,EAAU,GAAK,IAAIA,IAAYA,KADhCF,EAAU,GAAK,IAAIA,IAAYA,QCrBzDG,EAAqB,CACvBC,KAAM,CAAC,IAAK,KACZC,OAAQ,CAAC,IAAK,IAAK,KACnBC,KAAM,CAAC,IAAK,IAAK,KACjBC,OAAQ,CAAC,IAAK,IAAK,IAAU,MAG3BC,EAAwBC,GAAWlF,KAAKW,MAAMX,KAAKY,SAAWsE,GAwB9DC,EAA2BC,GAC7BH,EAtBuB,CAACG,IACxB,OAAQA,GACJ,IAAK,OACD,OAAO,EACX,IAAK,SACD,OAAO,GACX,IAAK,OACD,OAAO,GACX,IAAK,SACD,OAAO,IACX,QACI,OAAO,IAWMC,CAAmBD,IAAe,EAqE3D,EAjD2BA,IACvB,MAAME,EAzBe,CAACF,GACtBR,EAAmBQ,GAJQ,CAACA,GAC5BH,EAAqBL,EAAmBQ,GAAYvG,QAGrB0G,CAAuBH,IAwBrCI,CAAiBJ,GAClC,IAAIK,EAAUN,EAAwBC,GAClCM,EAAUP,EAAwBC,GAEtC,KAAoB,MAAbE,GACCG,EAAUC,GAAY,GACtBD,EAAUN,EAAwBC,GAClCM,EAAUP,EAAwBC,GAK1C,KAAoB,MAAbE,GACCG,EAAUC,EAAU,GACpBD,EAAUN,EAAwBC,GAClCM,EAAUP,EAAwBC,GAM1C,KAAoB,MAAbE,GACCG,EAAUC,EAAU,KACpBD,EAAUN,EAAwBC,GAClCM,EAAUP,EAAwBC,GAM1C,KAAoB,MAAbE,GACCG,EAAUC,EAAU,KACpBD,EAAUN,EAAwBC,GAClCM,EAAUP,EAAwBC,GAM1C,MAAMO,EAAe,GAAGF,KAAWH,KAAYI,IAG/C,MAAO,CACH9C,KAAM+C,EACN9B,OA/De,CAACrC,IACpB,MAAMoE,EAAcpE,EAASqE,MAAM,KAC7BC,EAAOC,OAAOH,EAAY,IAC1BN,EAAWM,EAAY,GACvBI,EAAOD,OAAOH,EAAY,IAChC,IAAI/B,EAUJ,OARIA,EADa,MAAbyB,EACSQ,EAAOE,EACI,MAAbV,EACEQ,EAAOE,EACI,MAAbV,EACEQ,EAAOE,EAEPF,EAAOE,EAEbnC,GA4CQoC,CAAeN,KC/F5BO,EAAgB1H,SAAS2H,iBAAiB,wBAEhD,IAAIC,EAAQ,EAEZ,SAASzG,IACLuG,EAAcG,SAASpH,IACRA,EACRc,YAAcqG,KAkBzB,QAAerF,OAAOC,OAAO,CAAEsF,UAd/B,SAAmBzG,GACXA,EAAS,EACTuG,EAAQpG,KAAKC,IAAI,EAAGmG,EAAQvG,GAE5BuG,GAASvG,EAEbF,KAQsC4G,MAL1C,WACIH,EAAQ,EACRzG,OCFJ,EApByB,CACrB6G,aAAc,CACVC,WAAY,CAAEpF,GAAI,IAAKC,EAAG,IAC1BoF,YAAa,CAAErF,GAAI,IAAKC,EAAG,KAC3BqF,WAAY,CAAEtF,GAAI,IAAKC,EAAG,MAE9BsF,OAAQ,CACJC,eAAgB,GAChBC,cAAe,EACfC,kBAAmB,IAEvBC,WAAY,GACZC,oBAAqB,EACrBC,aAAc,KACdC,YAAa,KACbC,mBAAoB,SACpBC,oBAAqB,EACrBC,kBAAmB,GCjBvB,SAASC,EAAYtI,GACNA,EACR0D,MAAM6E,QAAU,OAGvB,SAASC,EAAYxI,EAASyI,GACfzI,EACR0D,MAAM6E,QAAUE,EAGvB,SAASnF,EAAcoF,GAAS,WAAEC,EAAa,GAAE,KAAEhF,GAAS,IACxD,MAAMiF,EAAKrJ,SAAS+D,cAAcoF,GAMlC,OAJA5G,OAAO+G,OAAOD,EAAID,GAEdhF,GAAMiF,EAAG7E,YAAYxE,SAASuJ,eAAenF,IAE1CiF,ECgCX,MC9CMG,EAAYxJ,SAASU,cAAc,2BAEnC+I,EACM,0BADNA,EAGa,kCAkEnB,QAXA,SAAiCC,EAAiBZ,GAC9C,MAAMa,EAAW3J,SAAS4J,yBAE1BF,EAAgB7B,SAAS7E,IACrB,MAAM6G,EA3Bd,SAAuC7G,EAAU8F,GAC7C,MAAMgB,EAAW/F,EAAc,MACzBgG,EAAehG,EAAc,KAAM,CAAEK,KAAM,GAAGpB,EAASoB,YACvD4F,EAAiBjG,EAAc,OAAQ,CACzCK,KAAMpB,EAASqC,OAAO4E,WACtBb,WAAY,CACRc,UAAW,GAAGT,KAAqBA,OAGrCU,EAAiBpG,EAAc,MAWrC,OATAf,EAAS0B,OAAO0F,OAAOtB,GAAmBjB,SAAS1C,IAC/C,MAAMkF,EAxCd,SAAyClF,GACrC,MAAMmF,EAAenF,EAAME,OAAOK,UAC5B+D,EAPO,gCAUPc,EACFpF,EAAMG,OAAShD,EAAkBG,WAAa,GAAK0C,EAAME,OAAOI,MAE9D+E,EAAazG,EAAc,OAAQ,CACrCqF,WAAY,CACRc,UAAW,GAAGT,KAAqBa,KAEvClG,KAAMmG,IAGV,GAAIpF,EAAMG,OAAShD,EAAkBG,WAAY,CAC7C,MAAMgI,EAAQ1G,EAAc,IAAK,CAC7BqF,WAAY,CACRc,UArBG,sBAsBHQ,MAAO,sBAGfF,EAAWhG,YAAYiG,GAG3B,OAAOD,EAekBG,CAAgCxF,GACrDgF,EAAe3F,YAAY6F,MAG/BN,EAAavF,YAAYwF,GACzBF,EAAStF,YAAYuF,GACrBD,EAAStF,YAAY2F,GAEdL,EAOSc,CAA8B5H,EAAU8F,GACpDa,EAASnF,YAAYqF,MAGzBL,EAAUqB,gBAAgBlB,ICrDxBmB,EAAY9K,SAASU,cAAc,eACnCqK,EAAW/K,SAASU,cAAc,cAClCsK,EAAehL,SAASU,cAAc,mBACtCuK,EAAuBjL,SAASU,cAAc,2BAC9CwK,EAAalL,SAASU,cAAc,gBACpCyK,EAAcnL,SAASU,cAAc,iBACrC0K,EAAYpL,SAASU,cAAc,eACnC2K,EAAcrL,SAASU,cAAc,iBACrC4K,EAAgBtL,SAASU,cAAc,mBACvC6K,EAAcvL,SAASU,cAAc,iBACrC8K,EAAoBxL,SAAS2H,iBAAiB,oBAC9C8D,EAAazL,SAASU,cAAc,gBACpCgL,EAAgB1L,SAASU,cAAc,oBAEvCiL,EAAW,IAAK,GAChBC,EAAS,GACT3I,EAAa,SAAmB,QAAe,IAC/C,EAAS,IFnCf,MACI4I,YAAYjI,EAAQkI,GAChBrM,KAAKsM,SAAU,EACftM,KAAKuM,WAAQ7M,EAEbM,KAAKmE,OAASA,EACdnE,KAAK0B,KAAO2K,EAEZrM,KAAKwM,gBAAkB,EACvBxM,KAAKyM,YAAc,EACnBzM,KAAK0M,SAAW,IAAO,GAEvB1M,KAAK2M,MAAQ3M,KAAK2M,MAAMC,KAAK5M,MAGjC2M,MAAME,GACF7M,KAAKuM,MAAQO,sBAAsB9M,KAAK2M,OAExC3M,KAAKwM,iBAAmBK,EAAY7M,KAAKyM,YACzCzM,KAAKyM,YAAcI,EAEnB,IAAIE,GAAU,EAMd,IAJI/M,KAAKwM,gBAAkB,KACvBxM,KAAKwM,gBAAkBxM,KAAK0M,UAGzB1M,KAAKwM,iBAAmBxM,KAAK0M,UAChC1M,KAAKmE,OAAOnE,KAAK0M,UAEjBK,GAAU,EAEV/M,KAAKwM,iBAAmBxM,KAAK0M,SAG7BK,GAAS/M,KAAK0B,OAGtBsL,QACIhN,KAAKsM,SAAU,EACftM,KAAKuM,MAAQO,sBAAsB9M,KAAK2M,OAG5CM,OACIjN,KAAKsM,SAAU,EACfY,qBAAqBlN,KAAKuM,UE6IlC,SAAgBnI,GA7KH,IA8KL+I,IAEJrK,OAAOsK,KAAKjB,GAAQ/D,SAASiF,GAAQlB,EAAOkB,GAAK/G,KAAKlC,KAEtDkJ,EAAQlF,SAASmF,GAAUA,EAAMpJ,OAAOC,SAG5C,WACIuH,EAAU7J,YAAcqK,EAAOR,UAAUpF,wBAEzC+G,EAAQlF,SAASmF,GAAUA,EAAM7L,YAhKrC,IAAIyL,EAzBM,EA0BNK,EAAgB,KAChBF,EAAU,GACV,EAAkB,GAItB,SAASG,IACL,MAAMF,EAAQrK,EAAM,CAChBC,SAAUuK,KACVpK,MAAO4I,EAASnD,WAChBxF,SAAU,EAAkB2I,EAAS/C,oBACrC3F,aACAC,qBACAC,gBACAC,iBAEJuI,EAASnD,YAAcmD,EAASlD,oBAChC,sBAA8BuE,EAAMvM,SACpCsM,EAAQlI,KAAKmI,GAGjB,SAASG,KAEL,MAAMN,EAAOtK,OAAOsK,KAAKlB,EAAS3D,cAClC,OAAO2D,EAAS3D,aAAa6E,EAAKrL,KAAKW,MAAMX,KAAKY,SAAWyK,EAAKxM,UAGtE,SAAS+C,GAAY3C,GACjBsM,EAAUA,EAAQK,QAAQJ,GAClBA,EAAMvM,UAAYA,IAElBwM,IAAkBD,IAClBC,EAAgB,MAGpB,EAAgBpI,KAAKmI,EAAM5H,oBAEpB,KAIf,SAASiI,KACLC,qBACAC,GAAS,YAab,SAASC,GAAmBrI,GAGxB,GAFAA,EAAMsI,kBAEDR,GAA8C,KAA7B9B,EAAY1F,MAAMiI,OAAe,OAEvD,MAAMC,EAAgBV,EAAcjK,SAASqC,OAAO4E,WAE9C2D,EAAa9I,EACfxC,EAAkBI,kBAClByI,EAAY1F,OAGhBwH,EAAc/H,SAAS0I,GAEnBA,EAAWvI,OAAOI,QAAUkI,GAC5BC,EAAWvI,OAAOK,WAAY,EAC9BuH,EAActI,eACdsI,EAAgB,KAChBY,EAAa/F,UAAU6D,EAASvD,OAAOC,kBAEvCuF,EAAWvI,OAAOK,WAAY,EAC9BmI,EAAa/F,UAAU6D,EAASvD,OAAOE,eAG3C6C,EAAY1F,MAAQ,GAGxB,SAASvC,GAAkBiC,GACvBgG,EAAY2C,QAEZ,MAAMC,EAAehB,EAAQiB,MACxBhB,GAAUA,EAAMvM,UAAY0E,EAAM8I,gBAGnCF,IAAiBd,IAEjBA,GAAeA,EAAcjI,eAEjC+I,EAAa/I,eAEbiI,EAAgBc,GAGpB,SAAS5K,GAAa9B,GAClBwM,EAAa/F,UAAU6D,EAASvD,OAAOG,kBACvC,SAAclH,EAAQkM,IAG1B,SAASA,GAASW,GACdtB,EAjIU,EAkIV,EAAwB,EAAiBjB,EAAS7C,mBAClDC,EAAYgC,GACZW,EAAcnK,YAAc2M,GAAa,YACzCjF,EAAY+B,EAAc,QAG9B,SAAS,KACLW,EAASnD,WAAa,aAjEtBoD,EAAOuC,WAAa,EAAMxC,EAASjD,aAAcwE,GAGjDtB,EAAOR,UAAY,EAAMO,EAAShD,YAAa0E,GAAW,CACtDxH,aAAa,IA+DjBgI,EAAa9F,QACboD,EAAY1F,MAAQ,GACpB,QAAakG,EAAS9C,qBACtBkE,EAAQlF,SAASmF,GAAUA,EAAMrI,iBACjC,EAAkB,GAUtB,SAASyJ,KACL,KACArF,EAAYiC,GACZ/B,EAAY8B,EAAU,QACtB6B,EA9JS,EA2Lb,SAASyB,KACL,MACOC,EAAOC,GADU,CAAC,WAAY,SA5L5B,IA8LL3B,GA5BJA,EAhKQ,EAiKRzB,EAAYqD,UAAW,EACvBzB,EAAQlF,SAASmF,GAAUA,EAAMvM,QAAQwD,UAAUC,IAAI,mBA4BnD,EAAOwI,OACPnB,EAAYhK,YAAc+M,GA/LtB,IAgMG1B,IACP,EAAOH,QA3BXG,EAxKS,EAyKTzB,EAAYqD,UAAW,EACvBzB,EAAQlF,SAASmF,GAAUA,EAAMvM,QAAQwD,UAAUW,OAAO,mBA2BtD2G,EAAYhK,YAAcgN,GAIlC,SAASE,KACL1F,EAAY+B,GACZ7B,EAAYgC,EAAsB,QAGtC,SAASyD,GAAuBvJ,GAC5B,MAAMwJ,EAAqBxJ,EAAMyJ,OAAOC,QAAQjI,WAChDmC,EAAYkC,GACZhC,EAAY8B,EAAU,QA9D1B,SAAe4D,GACX,KACAhD,EAAS/C,mBAAqB+F,EAC9B/B,EAtJS,EAuJT,EAAOH,QA2DPA,CAAMkC,GAGV,SAASG,KAnNG,IAoNJlC,GAAiCyB,KACrC,EAAO3B,OACPE,EAzNM,EA0NN7D,EAAYgC,GACZ9B,EAAY6B,EAAW,QAgBZvI,OAAOC,OAAO,CACzBuM,KAZJ,WACI1D,EAAY5G,iBAAiB,QAASgK,IACtCnD,EAAc7G,iBAAiB,QAAS2J,IACxC7C,EAAY9G,iBAAiB,QAAS4J,IACtCnD,EAAWzG,iBAAiB,SAAU+I,IACtChC,EAAkB3D,SAASmH,GACvBA,EAAOvK,iBAAiB,QAASiK,MAErCjD,EAAWhH,iBAAiB,QAASqK,OCjPpCC,Q","file":"main.bundle.js","sourcesContent":["// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) scriptUrl = scripts[scripts.length - 1].src\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","const gameBoard = {\r\n    element: document.querySelector('#game-board'),\r\n    height: 400,\r\n    width: 1000,\r\n};\r\n\r\nexport default gameBoard;\r\n","const castle = {\r\n    height: 400,\r\n    width: 137,\r\n    lives: null,\r\n    elements: {\r\n        container: document.getElementById('castle'),\r\n        livesText: document.getElementById('castle-lives'),\r\n    },\r\n\r\n    setup(lives) {\r\n        this.lives = lives;\r\n        this.draw();\r\n    },\r\n\r\n    damage(amount, onGameOver) {\r\n        this.lives -= amount;\r\n        this.draw();\r\n\r\n        if (this.lives === 0) onGameOver();\r\n    },\r\n\r\n    draw() {\r\n        this.elements.livesText.textContent = Math.max(0, this.lives);\r\n    },\r\n};\r\n\r\nexport default castle;\r\n","import enemySpriteSheet from '../img/enemySpriteSheet.png';\r\nimport enemySpriteSheet2 from '../img/enemySpriteSheet2.png';\r\nimport enemySpriteSheet3 from '../img/enemySpriteSheet3.png';\r\n\r\nconst sprite = new Image();\r\nsprite.src = enemySpriteSheet;\r\n\r\nconst sprite2 = new Image();\r\nsprite2.src = enemySpriteSheet2;\r\n\r\nconst sprite3 = new Image();\r\nsprite3.src = enemySpriteSheet3;\r\n\r\nconst spriteSheets = [sprite, sprite2, sprite3];\r\n\r\nconst scale = 0.2;\r\nconst spriteSheetWidth = 12060 * scale;\r\nconst spriteSheetHeight = 490 * scale;\r\nconst spriteSheetColumns = 18;\r\nconst spriteSheetRows = 1;\r\nconst frameWidth = spriteSheetWidth / spriteSheetColumns;\r\nconst frameHeight = spriteSheetHeight / spriteSheetRows;\r\nconst frameInterval = 50;\r\nconst maxFrameX = 17;\r\nconst frameY = 0;\r\n\r\nfunction getRandomSpriteSheet() {\r\n    return spriteSheets[Math.floor(Math.random() * spriteSheets.length)];\r\n}\r\n\r\nfunction getBackgroundSize() {\r\n    return `${spriteSheetWidth}px ${spriteSheetHeight}px`;\r\n}\r\n\r\nfunction createEnemySpriteSheet() {\r\n    let timeSinceLastFrame = 0;\r\n    let frameX = 0;\r\n\r\n    function incFrameX() {\r\n        if (frameX >= maxFrameX) frameX = 0;\r\n        else frameX += 1;\r\n    }\r\n\r\n    function getBackgroundPosition() {\r\n        return `-${frameWidth * frameX}px -${frameHeight * frameY}px`;\r\n    }\r\n\r\n    function update(deltaTime) {\r\n        timeSinceLastFrame += deltaTime;\r\n        if (timeSinceLastFrame > frameInterval) {\r\n            incFrameX();\r\n            timeSinceLastFrame = 0;\r\n        }\r\n    }\r\n\r\n    return {\r\n        sprite: getRandomSpriteSheet(),\r\n        frameWidth,\r\n        frameHeight,\r\n        getRandomSpriteSheet,\r\n        getBackgroundPosition,\r\n        getBackgroundSize,\r\n        update,\r\n    };\r\n}\r\n\r\nexport default createEnemySpriteSheet;\r\n","import createEnemySpriteSheet from './createEnemySpriteSheet';\r\n\r\nconst ENEMY_EVENT_TYPES = Object.freeze({\r\n    HIT_CASTLE: 0,\r\n    QUESTION_ANSWERED: 1,\r\n});\r\n\r\nfunction Enemy({\r\n    position: { x, y },\r\n    speed,\r\n    question,\r\n    fieldWidth,\r\n    handleSelectEnemy,\r\n    damageCastle,\r\n    deleteEnemy,\r\n} = {}) {\r\n    const enemySpriteSheet = createEnemySpriteSheet();\r\n    const width = enemySpriteSheet.frameWidth;\r\n    const height = enemySpriteSheet.frameHeight;\r\n    const position = { x, y };\r\n    const element = createElement();\r\n    const events = [];\r\n\r\n    // PRIVATE FUNCTIONS\r\n\r\n    function createElement() {\r\n        const enemyElement = document.createElement('div');\r\n        const questionElement = document.createElement('div');\r\n\r\n        // set enemy element styles\r\n        enemyElement.classList.add('enemy');\r\n        enemyElement.style.width = `${width}px`;\r\n        enemyElement.style.height = `${height}px`;\r\n\r\n        // set question element styles and text\r\n        questionElement.classList.add('enemy-question');\r\n        questionElement.textContent = question.text;\r\n\r\n        // sprite styles\r\n        enemyElement.style.backgroundImage = `url(${enemySpriteSheet.sprite.src})`;\r\n        enemyElement.style.backgroundPosition =\r\n            enemySpriteSheet.getBackgroundPosition();\r\n        enemyElement.style.backgroundSize =\r\n            enemySpriteSheet.getBackgroundSize();\r\n\r\n        enemyElement.appendChild(questionElement);\r\n\r\n        enemyElement.addEventListener('click', handleSelectEnemy);\r\n\r\n        return enemyElement;\r\n    }\r\n\r\n    function hasHitCastle() {\r\n        return position.x >= fieldWidth - width / 2;\r\n    }\r\n\r\n    // PUBLIC FUNCTIONS\r\n\r\n    function update(deltaTime) {\r\n        if (hasHitCastle()) {\r\n            handleDelete();\r\n            events.push(createEnemyEvent(ENEMY_EVENT_TYPES.HIT_CASTLE));\r\n            damageCastle(1);\r\n            return;\r\n        }\r\n\r\n        // multiply speed by deltaTime in seconds\r\n        // for consistent movement across different framerates\r\n        position.x += speed * (deltaTime / 1000);\r\n\r\n        enemySpriteSheet.update(deltaTime);\r\n    }\r\n\r\n    function draw() {\r\n        // draw the enemy to different position\r\n        element.style.transform = `translate(${position.x}px, ${position.y}px)`;\r\n        element.style.backgroundPosition =\r\n            enemySpriteSheet.getBackgroundPosition();\r\n    }\r\n\r\n    function handleDelete() {\r\n        deleteEnemy(element);\r\n        element.remove();\r\n    }\r\n\r\n    function toggleSelect() {\r\n        element.classList.toggle('selected');\r\n    }\r\n\r\n    function addEvent(event) {\r\n        events.push(event);\r\n    }\r\n\r\n    function getQuestionInfo() {\r\n        return {\r\n            text: question.text,\r\n            answer: question.answer,\r\n            events,\r\n        };\r\n    }\r\n\r\n    return Object.freeze({\r\n        update,\r\n        draw,\r\n        handleDelete,\r\n        toggleSelect,\r\n        addEvent,\r\n        getQuestionInfo,\r\n        question,\r\n        get element() {\r\n            return element;\r\n        },\r\n    });\r\n}\r\n\r\nfunction createEnemyEvent(type, answerValue = null, answerIsCorrect = false) {\r\n    return {\r\n        type,\r\n        answer: {\r\n            value: answerValue,\r\n            isCorrect: answerIsCorrect,\r\n        },\r\n    };\r\n}\r\n\r\nexport { Enemy as default, createEnemyEvent, ENEMY_EVENT_TYPES };\r\n","function Timer(duration, onFinish, { autoRestart = true } = {}) {\r\n    let timeRemaining = duration;\r\n\r\n    function restart() {\r\n        timeRemaining = duration;\r\n    }\r\n\r\n    function handleComplete() {\r\n        onFinish();\r\n        if (autoRestart) restart();\r\n    }\r\n\r\n    function tick(deltaTime) {\r\n        timeRemaining = Math.max(0, timeRemaining - deltaTime);\r\n\r\n        if (timeRemaining <= 1) handleComplete();\r\n    }\r\n\r\n    // converts time in ms to mm:ss format\r\n    function getHumanTimeRemaining() {\r\n        const seconds = Math.ceil(timeRemaining / 1000) % 60;\r\n        const minutes = Math.floor(Math.ceil(timeRemaining / 1000) / 60);\r\n\r\n        const formatedSeconds = seconds < 10 ? `0${seconds}` : seconds;\r\n        const formattedMinutes = minutes < 10 ? `0${minutes}` : minutes;\r\n\r\n        return `${formattedMinutes}:${formatedSeconds}`;\r\n    }\r\n\r\n    return Object.freeze({\r\n        tick,\r\n        getHumanTimeRemaining,\r\n    });\r\n}\r\n\r\nexport default Timer;\r\n","// \\u00D7 is the unicode symbol for multiplication and \\u00F7 for division in Javascript.\r\n\r\nconst operatorDifficulty = {\r\n    easy: ['+', '-'],\r\n    medium: ['+', '-', '\\u00D7'],\r\n    hard: ['+', '-', '\\u00D7'],\r\n    insane: ['+', '-', '\\u00D7', '\\u00F7'],\r\n};\r\n\r\nconst wholeNumberGenerator = (number) => Math.floor(Math.random() * number);\r\n\r\n// Change difficulty here as this is the factor of multiplication that determines range of numbers.\r\nconst generateDifficulty = (difficulty) => {\r\n    switch (difficulty) {\r\n        case 'easy':\r\n            return 5;\r\n        case 'medium':\r\n            return 10;\r\n        case 'hard':\r\n            return 30;\r\n        case 'insane':\r\n            return 100;\r\n        default:\r\n            return 5;\r\n    }\r\n};\r\n\r\nconst indexOperatorGenerator = (difficulty) =>\r\n    wholeNumberGenerator(operatorDifficulty[difficulty].length);\r\n\r\nconst operatorSelector = (difficulty) =>\r\n    operatorDifficulty[difficulty][indexOperatorGenerator(difficulty)];\r\n\r\nconst questionNumberGenerator = (difficulty) =>\r\n    wholeNumberGenerator(generateDifficulty(difficulty)) + 1;\r\n\r\nconst answerQuestion = (question) => {\r\n    const questionArr = question.split(' ');\r\n    const num1 = Number(questionArr[0]);\r\n    const operator = questionArr[1];\r\n    const num2 = Number(questionArr[2]);\r\n    let answer;\r\n    if (operator === '+') {\r\n        answer = num1 + num2;\r\n    } else if (operator === '-') {\r\n        answer = num1 - num2;\r\n    } else if (operator === '\\u00D7') {\r\n        answer = num1 * num2;\r\n    } else {\r\n        answer = num1 / num2;\r\n    }\r\n    return answer;\r\n};\r\n\r\nconst questionGenerator = (difficulty) => {\r\n    const operator = operatorSelector(difficulty);\r\n    let number1 = questionNumberGenerator(difficulty);\r\n    let number2 = questionNumberGenerator(difficulty);\r\n    // Functions that will determine question difficulty\r\n    while (operator === '\\u00F7') {\r\n        if (number1 % number2 !== 0) {\r\n            number1 = questionNumberGenerator(difficulty);\r\n            number2 = questionNumberGenerator(difficulty);\r\n        } else {\r\n            break;\r\n        }\r\n    }\r\n    while (operator === '-') {\r\n        if (number1 - number2 < 0) {\r\n            number1 = questionNumberGenerator(difficulty);\r\n            number2 = questionNumberGenerator(difficulty);\r\n        } else {\r\n            break;\r\n        }\r\n    }\r\n\r\n    while (operator === '\\u00D7') {\r\n        if (number1 * number2 > 150) {\r\n            number1 = questionNumberGenerator(difficulty);\r\n            number2 = questionNumberGenerator(difficulty);\r\n        } else {\r\n            break;\r\n        }\r\n    }\r\n\r\n    while (operator === '+') {\r\n        if (number1 + number2 > 150) {\r\n            number1 = questionNumberGenerator(difficulty);\r\n            number2 = questionNumberGenerator(difficulty);\r\n        } else {\r\n            break;\r\n        }\r\n    }\r\n\r\n    const questionText = `${number1} ${operator} ${number2}`;\r\n    const answer = answerQuestion(questionText);\r\n\r\n    return {\r\n        text: questionText,\r\n        answer,\r\n    };\r\n};\r\n\r\nexport default questionGenerator;\r\n","const scoreElements = document.querySelectorAll('[data-score-display]');\r\n\r\nlet score = 0;\r\n\r\nfunction draw() {\r\n    scoreElements.forEach((element) => {\r\n        const el = element;\r\n        el.textContent = score;\r\n    });\r\n}\r\n\r\nfunction addPoints(amount) {\r\n    if (amount < 0) {\r\n        score = Math.max(0, score + amount);\r\n    } else {\r\n        score += amount;\r\n    }\r\n    draw();\r\n}\r\n\r\nfunction reset() {\r\n    score = 0;\r\n    draw();\r\n}\r\n\r\nexport default Object.freeze({ addPoints, reset });\r\n","const DEFAULT_SETTINGS = {\r\n    SPAWN_POINTS: {\r\n        FIRST_LANE: { x: -100, y: 35 },\r\n        SECOND_LANE: { x: -100, y: 135 },\r\n        THIRD_LANE: { x: -100, y: 235 },\r\n    },\r\n    POINTS: {\r\n        CORRECT_ANSWER: 10,\r\n        WRONG_ANSWER: -2,\r\n        CASTLE_LIFE_LOST: -10,\r\n    },\r\n    enemySpeed: 28,\r\n    enemySpeedIncrement: 1,\r\n    spawnTimerMs: 3500,\r\n    gameTimerMs: 15000,\r\n    questionDifficulty: 'medium',\r\n    castleStartingLives: 3,\r\n    lastAnswersToShow: 5,\r\n};\r\n\r\nexport default DEFAULT_SETTINGS;","function hideElement(element) {\r\n    const el = element;\r\n    el.style.display = 'none';\r\n}\r\n\r\nfunction showElement(element, displayValue) {\r\n    const el = element;\r\n    el.style.display = displayValue;\r\n}\r\n\r\nfunction createElement(tagName, { attributes = {}, text } = {}) {\r\n    const el = document.createElement(tagName);\r\n\r\n    Object.assign(el, attributes);\r\n\r\n    if (text) el.appendChild(document.createTextNode(text));\r\n\r\n    return el;\r\n}\r\n\r\nexport { hideElement, showElement, createElement };\r\n","class Engine {\r\n    constructor(update, render) {\r\n        this.running = false;\r\n        this.rafID = undefined;\r\n\r\n        this.update = update;\r\n        this.draw = render;\r\n\r\n        this.accumulatedTime = 0;\r\n        this.currentTime = 0;\r\n        this.timeStep = 1000 / 60;\r\n\r\n        this.cycle = this.cycle.bind(this);\r\n    }\r\n\r\n    cycle(timeStamp) {\r\n        this.rafID = requestAnimationFrame(this.cycle);\r\n\r\n        this.accumulatedTime += timeStamp - this.currentTime;\r\n        this.currentTime = timeStamp;\r\n\r\n        let updated = false;\r\n\r\n        if (this.accumulatedTime > 60) {\r\n            this.accumulatedTime = this.timeStep;\r\n        }\r\n\r\n        while (this.accumulatedTime >= this.timeStep) {\r\n            this.update(this.timeStep);\r\n\r\n            updated = true;\r\n\r\n            this.accumulatedTime -= this.timeStep;\r\n        }\r\n\r\n        if (updated) this.draw();\r\n    }\r\n\r\n    start() {\r\n        this.running = true;\r\n        this.rafID = requestAnimationFrame(this.cycle);\r\n    }\r\n\r\n    stop() {\r\n        this.running = false;\r\n        cancelAnimationFrame(this.rafID);\r\n    }\r\n}\r\n\r\nexport default Engine;\r\n","import { createElement } from './domUtils';\r\nimport { ENEMY_EVENT_TYPES } from './enemy';\r\n\r\nconst tableBody = document.querySelector('#question-history tbody');\r\n\r\nconst cssClasses = {\r\n    answer: 'question-history-answer',\r\n    wrongAnswer: 'question-history-wrong-answer',\r\n    correctAnswer: 'question-history-correct-answer',\r\n    hitCastleIcon: 'fas fa-heart-broken',\r\n};\r\n\r\nfunction createQuestionHistoryUserAnswer(event) {\r\n    const bgColorClass = event.answer.isCorrect\r\n        ? cssClasses.correctAnswer\r\n        : cssClasses.wrongAnswer;\r\n\r\n    const answerText =\r\n        event.type === ENEMY_EVENT_TYPES.HIT_CASTLE ? '' : event.answer.value;\r\n\r\n    const answerSpan = createElement('span', {\r\n        attributes: {\r\n            className: `${cssClasses.answer} ${bgColorClass}`,\r\n        },\r\n        text: answerText,\r\n    });\r\n\r\n    if (event.type === ENEMY_EVENT_TYPES.HIT_CASTLE) {\r\n        const iconI = createElement('i', {\r\n            attributes: {\r\n                className: cssClasses.hitCastleIcon,\r\n                title: 'Enemy Hit Castle',\r\n            },\r\n        });\r\n        answerSpan.appendChild(iconI);\r\n    }\r\n\r\n    return answerSpan;\r\n}\r\n\r\nfunction createQuestionHistoryTableRow(question, lastAnswersToShow) {\r\n    const tableRow = createElement('tr');\r\n    const questionData = createElement('td', { text: `${question.text} = ` });\r\n    const questionAnswer = createElement('span', {\r\n        text: question.answer.toString(),\r\n        attributes: {\r\n            className: `${cssClasses.answer} ${cssClasses.correctAnswer}`,\r\n        },\r\n    });\r\n    const userAnswerData = createElement('td');\r\n\r\n    question.events.slice(-lastAnswersToShow).forEach((event) => {\r\n        const userAnswerEl = createQuestionHistoryUserAnswer(event);\r\n        userAnswerData.appendChild(userAnswerEl);\r\n    });\r\n\r\n    questionData.appendChild(questionAnswer);\r\n    tableRow.appendChild(questionData);\r\n    tableRow.appendChild(userAnswerData);\r\n\r\n    return tableRow;\r\n}\r\n\r\nfunction populateQuestionHistory(questionHistory, lastAnswersToShow) {\r\n    const fragment = document.createDocumentFragment();\r\n\r\n    questionHistory.forEach((question) => {\r\n        const row = createQuestionHistoryTableRow(question, lastAnswersToShow);\r\n        fragment.appendChild(row);\r\n    });\r\n\r\n    tableBody.replaceChildren(fragment);\r\n}\r\n\r\nexport default populateQuestionHistory;\r\n","import gameBoard from './gameBoard';\r\nimport castle from './castle';\r\nimport Enemy, { ENEMY_EVENT_TYPES, createEnemyEvent } from './enemy';\r\nimport Timer from './timer';\r\nimport questionGenerator from './questionGenerator';\r\nimport scoreHandler from './scoreHandler';\r\nimport DEFAULT_SETTINGS from './defaultSettings';\r\nimport { hideElement, showElement } from './domUtils';\r\nimport Engine from './engine';\r\nimport populateQuestionHistory from './questionHistory'; \r\n\r\nconst GAMESTATES = {\r\n    MENU: 0,\r\n    RUNNING: 1,\r\n    GAMEOVER: 2,\r\n    PAUSED: 3,\r\n};\r\n\r\nconst startPage = document.querySelector('#start-page');\r\nconst gamePage = document.querySelector('#game-page');\r\nconst gameOverPage = document.querySelector('#game-over-page');\r\nconst difficultySelectPage = document.querySelector('#difficulty-select-page');\r\nconst answerForm = document.querySelector('.answer-form');\r\nconst answerInput = document.querySelector('#answer-input');\r\nconst gameTimer = document.querySelector('#game-timer');\r\nconst startButton = document.querySelector('.start-button');\r\nconst restartButton = document.querySelector('#restart-button');\r\nconst pauseButton = document.querySelector('.pause-button');\r\nconst difficultyButtons = document.querySelectorAll('[data-difficulty');\r\nconst homeButton = document.querySelector('#home-button');\r\nconst gameOverTitle = document.querySelector('#game-over-title');\r\n\r\nconst settings = { ...DEFAULT_SETTINGS };\r\nconst timers = {};\r\nconst fieldWidth = gameBoard.width - (castle.width - 70);\r\nconst engine = new Engine(update, draw);\r\n\r\nlet gameState = GAMESTATES.MENU;\r\nlet selectedEnemy = null;\r\nlet enemies = [];\r\nlet questionHistory = [];\r\n\r\n// PRIVATE FUNCTIONS\r\n\r\nfunction spawnEnemy() {\r\n    const enemy = Enemy({\r\n        position: getRandomSpawnPoint(),\r\n        speed: settings.enemySpeed,\r\n        question: questionGenerator(settings.questionDifficulty),\r\n        fieldWidth,\r\n        handleSelectEnemy,\r\n        damageCastle,\r\n        deleteEnemy,\r\n    });\r\n    settings.enemySpeed += settings.enemySpeedIncrement;\r\n    gameBoard.element.appendChild(enemy.element);\r\n    enemies.push(enemy);\r\n}\r\n\r\nfunction getRandomSpawnPoint() {\r\n    // randomly choose an object keys in the POSITION object\r\n    const keys = Object.keys(settings.SPAWN_POINTS);\r\n    return settings.SPAWN_POINTS[keys[Math.floor(Math.random() * keys.length)]];\r\n}\r\n\r\nfunction deleteEnemy(element) {\r\n    enemies = enemies.filter((enemy) => {\r\n        if (enemy.element !== element) return true;\r\n\r\n        if (selectedEnemy === enemy) {\r\n            selectedEnemy = null;\r\n        }\r\n\r\n        questionHistory.push(enemy.getQuestionInfo());\r\n\r\n        return false;\r\n    });\r\n}\r\n\r\nfunction handleWin() {\r\n    onOpenClaimRewards();\r\n    gameOver('You Win!');\r\n}\r\n\r\nfunction initialiseTimers() {\r\n    // spawn enemy every 2.5 seconds\r\n    timers.spawnTimer = Timer(settings.spawnTimerMs, spawnEnemy);\r\n\r\n    // end game after 300000 ms (5 minutes)\r\n    timers.gameTimer = Timer(settings.gameTimerMs, handleWin, {\r\n        autoRestart: false,\r\n    });\r\n}\r\n\r\nfunction handleAnswerSubmit(event) {\r\n    event.preventDefault();\r\n\r\n    if (!selectedEnemy || answerInput.value.trim() === '') return;\r\n\r\n    const correctAnswer = selectedEnemy.question.answer.toString();\r\n\r\n    const enemyEvent = createEnemyEvent(\r\n        ENEMY_EVENT_TYPES.QUESTION_ANSWERED,\r\n        answerInput.value\r\n    );\r\n\r\n    selectedEnemy.addEvent(enemyEvent);\r\n\r\n    if (enemyEvent.answer.value === correctAnswer) {\r\n        enemyEvent.answer.isCorrect = true;\r\n        selectedEnemy.handleDelete();\r\n        selectedEnemy = null;\r\n        scoreHandler.addPoints(settings.POINTS.CORRECT_ANSWER);\r\n    } else {\r\n        enemyEvent.answer.isCorrect = false;\r\n        scoreHandler.addPoints(settings.POINTS.WRONG_ANSWER);\r\n    }\r\n\r\n    answerInput.value = '';\r\n}\r\n\r\nfunction handleSelectEnemy(event) {\r\n    answerInput.focus();\r\n\r\n    const clickedEnemy = enemies.find(\r\n        (enemy) => enemy.element === event.currentTarget\r\n    );\r\n\r\n    if (clickedEnemy === selectedEnemy) return;\r\n\r\n    if (selectedEnemy) selectedEnemy.toggleSelect();\r\n\r\n    clickedEnemy.toggleSelect();\r\n\r\n    selectedEnemy = clickedEnemy;\r\n}\r\n\r\nfunction damageCastle(amount) {\r\n    scoreHandler.addPoints(settings.POINTS.CASTLE_LIFE_LOST);\r\n    castle.damage(amount, gameOver);\r\n}\r\n\r\nfunction gameOver(titleText) {\r\n    gameState = GAMESTATES.GAMEOVER;\r\n    populateQuestionHistory(questionHistory, settings.lastAnswersToShow);\r\n    hideElement(gamePage);\r\n    gameOverTitle.textContent = titleText || 'Game Over';\r\n    showElement(gameOverPage, 'flex');\r\n}\r\n\r\nfunction reset() {\r\n    settings.enemySpeed = DEFAULT_SETTINGS.enemySpeed;\r\n    initialiseTimers();\r\n    scoreHandler.reset();\r\n    answerInput.value = '';\r\n    castle.setup(settings.castleStartingLives);\r\n    enemies.forEach((enemy) => enemy.handleDelete());\r\n    questionHistory = [];\r\n}\r\n\r\nfunction start(selectedDifficulty) {\r\n    reset();\r\n    settings.questionDifficulty = selectedDifficulty;\r\n    gameState = GAMESTATES.RUNNING;\r\n    engine.start();\r\n}\r\n\r\nfunction restart() {\r\n    reset();\r\n    hideElement(gameOverPage);\r\n    showElement(gamePage, 'flex');\r\n    gameState = GAMESTATES.RUNNING;\r\n}\r\n\r\nfunction pause() {\r\n    gameState = GAMESTATES.PAUSED;\r\n    answerInput.disabled = true;\r\n    enemies.forEach((enemy) => enemy.element.classList.add('not-clickable'));\r\n}\r\n\r\nfunction unPause() {\r\n    gameState = GAMESTATES.RUNNING;\r\n    answerInput.disabled = false;\r\n    enemies.forEach((enemy) => enemy.element.classList.remove('not-clickable'));\r\n}\r\n\r\nfunction update(deltaTime) {\r\n    if (gameState !== GAMESTATES.RUNNING) return;\r\n\r\n    Object.keys(timers).forEach((key) => timers[key].tick(deltaTime));\r\n\r\n    enemies.forEach((enemy) => enemy.update(deltaTime));\r\n}\r\n\r\nfunction draw() {\r\n    gameTimer.textContent = timers.gameTimer.getHumanTimeRemaining();\r\n\r\n    enemies.forEach((enemy) => enemy.draw());\r\n}\r\n\r\nfunction handlePause() {\r\n    const pauseButtonText = ['Continue', 'Pause'];\r\n    const [first, second] = pauseButtonText;\r\n    if (gameState === GAMESTATES.RUNNING) {\r\n        pause();\r\n        engine.stop();\r\n        pauseButton.textContent = first;\r\n    } else if (gameState === GAMESTATES.PAUSED) {\r\n        engine.start();\r\n        unPause();\r\n        pauseButton.textContent = second;\r\n    }\r\n}\r\n\r\nfunction handleStartButtonClick() {\r\n    hideElement(startPage);\r\n    showElement(difficultySelectPage, 'flex');\r\n}\r\n\r\nfunction handleDifficultySelect(event) {\r\n    const selectedDifficulty = event.target.dataset.difficulty;\r\n    hideElement(difficultySelectPage);\r\n    showElement(gamePage, 'flex');\r\n    start(selectedDifficulty);\r\n}\r\n\r\nfunction handleHomeButtonClick() {\r\n    if (gameState === GAMESTATES.PAUSED) handlePause();\r\n    engine.stop();\r\n    gameState = GAMESTATES.MENU;\r\n    hideElement(gamePage);\r\n    showElement(startPage, 'flex');\r\n}\r\n\r\n// PUBLIC FUNCTIONS\r\n\r\nfunction init() {\r\n    startButton.addEventListener('click', handleStartButtonClick);\r\n    restartButton.addEventListener('click', restart);\r\n    pauseButton.addEventListener('click', handlePause);\r\n    answerForm.addEventListener('submit', handleAnswerSubmit);\r\n    difficultyButtons.forEach((button) =>\r\n        button.addEventListener('click', handleDifficultySelect)\r\n    );\r\n    homeButton.addEventListener('click', handleHomeButtonClick);\r\n}\r\n\r\nexport default Object.freeze({\r\n    init,\r\n});\r\n","import './styles/styles.css';\r\nimport game from './modules/game';\r\n\r\ngame.init();\r\n"],"sourceRoot":""}